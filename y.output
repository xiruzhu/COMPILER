Nonterminals useless in grammar

   empty_rbrac
   empty_sbrac
   empty_cbrac


Terminals unused in grammar

   break_
   case_
   chan_
   const_
   continue_
   default_
   defer_
   else_
   fallthrough_
   for_
   func_
   go_
   goto_
   import_
   interface_
   map_
   range_
   return_
   select_
   struct_
   type_
   var_
   int_
   float_
   bool_
   rune_
   string_
   print_
   println_
   append_
   add_
   minus_
   mult_
   div_
   mod_
   amp_
   caret_
   ls_
   rs_
   unknown_
   add_eq_
   minus_eq_
   mult_eq_
   div_eq_
   mod_eq_
   amp_eq_
   vb_eq_
   caret_eq_
   ls_eq_
   rs_eq_
   unknown_eq_
   and_
   or_
   arrow_
   incre_
   decre_
   equality_
   lt_
   gt_
   eq_
   not_
   not_eq_
   lteq_
   gteq_
   decla_
   etc_
   lrbrac_
   rrbrac_
   lsbrac_
   rsbrac_
   lcbrac_
   rcbrac_
   comma_
   dot_
   colon_
   vb_
   float_lit_
   string_lit_
   rune_lit_
   error_
   lteq
   unary


Rules useless in grammar

   18 empty_rbrac: lrbrac_ rrbrac_

   19 empty_sbrac: lsbrac_ lsbrac_

   20 empty_cbrac: lcbrac_ lcbrac_


State 1 conflicts: 5 shift/reduce
State 12 conflicts: 5 shift/reduce


Grammar

    0 $accept: go_prog $end

    1 line_end: semi_colon_ new_line_
    2         | new_line_

    3 line_end_list: %empty
    4              | line_end_list line_end

    5 go_prog: pckg_decl top_decl_list line_end_list
    6        | top_decl_list line_end_list
    7        | %empty

    8 pckg_decl: line_end_list package_ id_ line_end

    9 top_decl_list: line_end_list top_decl
   10              | line_end_list top_decl_list top_decl

   11 top_decl: decl
   12         | func_decl

   13 decl: type_decl
   14     | var_decl

   15 func_decl: if_

   16 type_decl: int_lit_

   17 var_decl: switch_


Terminals, with rules where they appear

$end (0) 0
error (256)
break_ (258)
case_ (259)
chan_ (260)
const_ (261)
continue_ (262)
default_ (263)
defer_ (264)
else_ (265)
fallthrough_ (266)
for_ (267)
func_ (268)
go_ (269)
goto_ (270)
if_ (271) 15
import_ (272)
interface_ (273)
map_ (274)
package_ (275) 8
range_ (276)
return_ (277)
select_ (278)
struct_ (279)
switch_ (280) 17
type_ (281)
var_ (282)
int_ (283)
float_ (284)
bool_ (285)
rune_ (286)
string_ (287)
print_ (288)
println_ (289)
append_ (290)
add_ (291)
minus_ (292)
mult_ (293)
div_ (294)
mod_ (295)
amp_ (296)
caret_ (297)
ls_ (298)
rs_ (299)
unknown_ (300)
add_eq_ (301)
minus_eq_ (302)
mult_eq_ (303)
div_eq_ (304)
mod_eq_ (305)
amp_eq_ (306)
vb_eq_ (307)
caret_eq_ (308)
ls_eq_ (309)
rs_eq_ (310)
unknown_eq_ (311)
and_ (312)
or_ (313)
arrow_ (314)
incre_ (315)
decre_ (316)
equality_ (317)
lt_ (318)
gt_ (319)
eq_ (320)
not_ (321)
not_eq_ (322)
lteq_ (323)
gteq_ (324)
decla_ (325)
etc_ (326)
lrbrac_ (327)
rrbrac_ (328)
lsbrac_ (329)
rsbrac_ (330)
lcbrac_ (331)
rcbrac_ (332)
comma_ (333)
dot_ (334)
colon_ (335)
vb_ (336)
int_lit_ (337) 16
float_lit_ (338)
string_lit_ (339)
rune_lit_ (340)
semi_colon_ (341) 1
id_ (342) 8
new_line_ (343) 1 2
error_ (344)
lteq (345)
unary (346)


Nonterminals, with rules where they appear

$accept (92)
    on left: 0
line_end (93)
    on left: 1 2, on right: 4 8
line_end_list (94)
    on left: 3 4, on right: 4 5 6 8 9 10
go_prog (95)
    on left: 5 6 7, on right: 0
pckg_decl (96)
    on left: 8, on right: 5
top_decl_list (97)
    on left: 9 10, on right: 5 6 10
top_decl (98)
    on left: 11 12, on right: 9 10
decl (99)
    on left: 13 14, on right: 11
func_decl (100)
    on left: 15, on right: 12
type_decl (101)
    on left: 16, on right: 13
var_decl (102)
    on left: 17, on right: 14


State 0

    0 $accept: . go_prog $end

    $end      reduce using rule 7 (go_prog)
    $default  reduce using rule 3 (line_end_list)

    line_end_list  go to state 1
    go_prog        go to state 2
    pckg_decl      go to state 3
    top_decl_list  go to state 4


State 1

    4 line_end_list: line_end_list . line_end
    8 pckg_decl: line_end_list . package_ id_ line_end
    9 top_decl_list: line_end_list . top_decl
   10              | line_end_list . top_decl_list top_decl

    if_          shift, and go to state 5
    package_     shift, and go to state 6
    switch_      shift, and go to state 7
    int_lit_     shift, and go to state 8
    semi_colon_  shift, and go to state 9
    new_line_    shift, and go to state 10

    if_          [reduce using rule 3 (line_end_list)]
    switch_      [reduce using rule 3 (line_end_list)]
    int_lit_     [reduce using rule 3 (line_end_list)]
    semi_colon_  [reduce using rule 3 (line_end_list)]
    new_line_    [reduce using rule 3 (line_end_list)]

    line_end       go to state 11
    line_end_list  go to state 12
    top_decl_list  go to state 13
    top_decl       go to state 14
    decl           go to state 15
    func_decl      go to state 16
    type_decl      go to state 17
    var_decl       go to state 18


State 2

    0 $accept: go_prog . $end

    $end  shift, and go to state 19


State 3

    5 go_prog: pckg_decl . top_decl_list line_end_list

    $default  reduce using rule 3 (line_end_list)

    line_end_list  go to state 12
    top_decl_list  go to state 20


State 4

    6 go_prog: top_decl_list . line_end_list

    $default  reduce using rule 3 (line_end_list)

    line_end_list  go to state 21


State 5

   15 func_decl: if_ .

    $default  reduce using rule 15 (func_decl)


State 6

    8 pckg_decl: line_end_list package_ . id_ line_end

    id_  shift, and go to state 22


State 7

   17 var_decl: switch_ .

    $default  reduce using rule 17 (var_decl)


State 8

   16 type_decl: int_lit_ .

    $default  reduce using rule 16 (type_decl)


State 9

    1 line_end: semi_colon_ . new_line_

    new_line_  shift, and go to state 23


State 10

    2 line_end: new_line_ .

    $default  reduce using rule 2 (line_end)


State 11

    4 line_end_list: line_end_list line_end .

    $default  reduce using rule 4 (line_end_list)


State 12

    4 line_end_list: line_end_list . line_end
    9 top_decl_list: line_end_list . top_decl
   10              | line_end_list . top_decl_list top_decl

    if_          shift, and go to state 5
    switch_      shift, and go to state 7
    int_lit_     shift, and go to state 8
    semi_colon_  shift, and go to state 9
    new_line_    shift, and go to state 10

    if_          [reduce using rule 3 (line_end_list)]
    switch_      [reduce using rule 3 (line_end_list)]
    int_lit_     [reduce using rule 3 (line_end_list)]
    semi_colon_  [reduce using rule 3 (line_end_list)]
    new_line_    [reduce using rule 3 (line_end_list)]

    line_end       go to state 11
    line_end_list  go to state 12
    top_decl_list  go to state 13
    top_decl       go to state 14
    decl           go to state 15
    func_decl      go to state 16
    type_decl      go to state 17
    var_decl       go to state 18


State 13

   10 top_decl_list: line_end_list top_decl_list . top_decl

    if_       shift, and go to state 5
    switch_   shift, and go to state 7
    int_lit_  shift, and go to state 8

    top_decl   go to state 24
    decl       go to state 15
    func_decl  go to state 16
    type_decl  go to state 17
    var_decl   go to state 18


State 14

    9 top_decl_list: line_end_list top_decl .

    $default  reduce using rule 9 (top_decl_list)


State 15

   11 top_decl: decl .

    $default  reduce using rule 11 (top_decl)


State 16

   12 top_decl: func_decl .

    $default  reduce using rule 12 (top_decl)


State 17

   13 decl: type_decl .

    $default  reduce using rule 13 (decl)


State 18

   14 decl: var_decl .

    $default  reduce using rule 14 (decl)


State 19

    0 $accept: go_prog $end .

    $default  accept


State 20

    5 go_prog: pckg_decl top_decl_list . line_end_list

    $default  reduce using rule 3 (line_end_list)

    line_end_list  go to state 25


State 21

    4 line_end_list: line_end_list . line_end
    6 go_prog: top_decl_list line_end_list .

    semi_colon_  shift, and go to state 9
    new_line_    shift, and go to state 10

    $default  reduce using rule 6 (go_prog)

    line_end  go to state 11


State 22

    8 pckg_decl: line_end_list package_ id_ . line_end

    semi_colon_  shift, and go to state 9
    new_line_    shift, and go to state 10

    line_end  go to state 26


State 23

    1 line_end: semi_colon_ new_line_ .

    $default  reduce using rule 1 (line_end)


State 24

   10 top_decl_list: line_end_list top_decl_list top_decl .

    $default  reduce using rule 10 (top_decl_list)


State 25

    4 line_end_list: line_end_list . line_end
    5 go_prog: pckg_decl top_decl_list line_end_list .

    semi_colon_  shift, and go to state 9
    new_line_    shift, and go to state 10

    $default  reduce using rule 5 (go_prog)

    line_end  go to state 11


State 26

    8 pckg_decl: line_end_list package_ id_ line_end .

    $default  reduce using rule 8 (pckg_decl)
